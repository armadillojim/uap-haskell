# Use new container infrastructure to enable caching
sudo: false

# Choose a lightweight base image; we provide our own build tools.
language: c

# GHC depends on GMP. You can add other dependencies here as well.
addons:
  apt:
    packages:
    - libgmp-dev

# The different configurations we want to test. You could also do things like
# change flags or use --stack-yaml to point to a different file.
env:
- ARGS="--resolver=lts-2"
- ARGS="--resolver=lts-3"
- ARGS="--resolver=lts-4"
- ARGS="--resolver=lts-5"
- ARGS="--resolver=lts-6"
- ARGS=""
- ARGS="--resolver=nightly"

before_install:
# Download and unpack the stack executable
- mkdir -p ~/.local/bin
- export PATH=$HOME/.local/bin:$PATH
- travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'

# This line does all of the work: installs GHC if necessary, build the library,
# executables, and test suites, and runs the test suites. --no-terminal works
# around some quirks in Travis's terminal implementation.
script:
  - stack $ARGS setup
  # Our tests output tons of text. Travis will fail a test for outputting > 4MB of output. If you have a smart terminal, it will still use ansi-terminal to display test headings. When we set TERM to dumb, it should print nothing on success but hopefully print an error on failure (unlike --quiet).
  - TERM=dumb stack $ARGS test --no-terminal --haddock --no-haddock-deps --test-arguments="--hide-successes"
  - stack $ARGS bench
  - stack $ARGS build
  - stack $ARGS sdist

# Caching so the next build will be fast too.
cache:
  directories:
  - .stack-work
